plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'com.shazam.fork'
    id("com.emergetools.android") version "2.0.1"
}

apply plugin: 'com.shazam.fork'

emerge {
    // Emerge uses the EMERGE_API_TOKEN env variable by default, so no need to set env explicitly
    apiToken.set("c0b49d86-5dcd-420e-93a1-06e27aee2aca")
}

android {
    compileSdkVersion 33
    defaultConfig {
        configurations.all {
            resolutionStrategy { force 'androidx.core:core-ktx:1.6.0' }
        }
        applicationId "ashunevich.uniconverter20"
        minSdkVersion 30
        //noinspection OldTargetApi
        targetSdkVersion 30
        versionCode 5
        versionName "5"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        vectorDrawables.useSupportLibrary = true
    }
    compileOptions{
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        buildFeatures {
            viewBinding true
        }
    }
    buildToolsVersion '30.0.3'
}

dependencies {

    //web
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.1.0'
    annotationProcessor 'com.google.code.gson:gson:2.8.6'
    implementation'com.google.code.gson:gson:2.8.6'

    //base
    implementation 'androidx.core:core-ktx:1.10.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.3.0'
    //noinspection GradleDependency
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    //noinspection GradleDependency
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    //noinspection GradleDependency
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    //Other
    implementation("org.mariuszgromada.math:MathParser.org-mXparser:5.2.1")
    implementation 'com.github.AShunevych:Conversion-Library-Android:0.1.4'
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //Test
    androidTestImplementation 'com.kaspersky.android-components:kaspresso:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'io.github.kakaocup:kakao:3.1.0'
    androidTestImplementation('com.adevinta.android:barista:4.2.0') {
        exclude group: 'org.jetbrains.kotlin'
    }
    implementation 'androidx.test.ext:junit-ktx:1.1.3'
    testImplementation 'junit:junit:4.13.2'

    androidTestImplementation("com.emergetools.snapshots:snapshots:0.8.0")

    implementation(platform("org.jetbrains.kotlin:kotlin-bom:1.8.0"))
}

// Always register the task so it's visible to Gradle immediately
tasks.register("verifyTestMethods") {
    group = "verification"
    description = "Verify that test methods listed in testConfig.txt exist in source files"

    doLast {
        def inputFile = file("testConfig.txt")
        def srcDirs = ["src/androidTest/java"]
        def missing = []

        inputFile.eachLine { line ->
            // Skip empty lines
            if (!line.contains("=")) return
            def (key, entries) = line.split("=")
            if (key.trim() == "app") return

            entries.split(",").each { entry ->
                def (classNameRaw, methodNameRaw) = entry.split("#")
                def className = "ashunevich.uniconverterKT.espresso.tests." + classNameRaw.trim()
                def methodName = methodNameRaw.trim()
                def relativePath = className.replace('.', '/') + ".kt"

                def found = false
                srcDirs.any { dir ->
                    def file = file("$projectDir/$dir/$relativePath")
                    if (file.exists() && (file.text =~ /fun\s+${methodName}\s*\(/)) {
                        println "Found test $methodName, in class $classNameRaw"
                        found = true
                        return true
                    }
                    return false
                }
                if (!found) {
                    missing << "$classNameRaw#$methodName"
                }
            }
        }

        if (!missing.isEmpty()) {
            throw new GradleException("Missing test definitions:\n" + missing.join("\n"))
        }
    }
}
